{"version":3,"sources":["components/Jobs.jsx","markdownUtils.js","components/Job.jsx","components/JobForm.jsx","index.js"],"names":["GET_JOBS","gql","_templateObject","CompanyName","styled","span","_templateObject2","JobTitle","Link","_templateObject3","JobContainer","li","_templateObject4","CreateNewJobContainer","div","_templateObject5","CreateNewJob","_templateObject6","Container","_templateObject7","Jobs","_useQuery","useQuery","data","loading","error","react_default","a","createElement","console","log","renderJobs","jobs","map","_ref","id","company","title","to","concat","md","require","fromDb","markdownFromDb","toMd","JSON","parse","toDb","stringToBeConverted","stringify","GET_JOB","Job_templateObject","ApplyLink","Job_templateObject2","ApplyContainer","Job_templateObject3","BackButton","Job_templateObject4","Job_templateObject5","DeleteJob","Job_templateObject6","DeleteJobFromDb","Job_templateObject7","Job","params","variables","jobId","deleteAJob","useMutation","_data$jobs_by_pk","jobs_by_pk","description","link_to_apply","convertedDescription","Job_JobContainer","react_markdown_default","source","onClick","e","parseInt","then","navigate","href","Form","form","JobForm_templateObject","Input","input","JobForm_templateObject2","InputContainer","JobForm_templateObject3","Submit","JobForm_templateObject4","JobDescription","textarea","JobForm_templateObject5","Cancel","JobForm_templateObject6","INSERT_JOB","JobForm_templateObject7","JobForm","_useState","useState","linkToApply","_useState2","Object","slicedToArray","formState","setFormState","handleChange","objectSpread","defineProperty","target","name","value","insertJob","onSubmit","preventDefault","type","placeholder","onChange","cols","rows","client","ApolloClient","uri","AppRoot","es","components_Jobs","path","components_Job","components_JobForm","rootElement","document","getElementById","ReactDOM","render","react_apollo_esm","ApolloContext","src_AppRoot"],"mappings":"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","file":"static/js/main.bd6624e9.chunk.js","sourcesContent":["import React from \"react\";\nimport gql from \"graphql-tag\";\nimport { useQuery } from \"react-apollo-hooks\";\nimport styled from \"styled-components\";\nimport { Link } from \"@reach/router\";\n\nconst GET_JOBS = gql`\n  query {\n    jobs {\n      id\n      company\n      title\n    }\n  }\n`;\n\nconst CompanyName = styled.span`\n  flex: 1;\n`;\nconst JobTitle = styled(Link)`\n  color: black;\n  text-decoration: none;\n  flex: 3;\n`;\nconst JobContainer = styled.li`\n  display: flex;\n  justify-content: space-between;\n  border-bottom: 1px solid black;\n`;\n\nconst CreateNewJobContainer = styled.div`\n  text-align: center;\n`;\nconst CreateNewJob = styled(Link)`\n  text-decoration: none;\n  color: blue;\n  padding: 15px;\n  font-size: 18px;\n  border: 1px solid green;\n`;\n\nconst Container = styled.div`\n  margin: 25px;\n`;\n\nfunction Jobs() {\n  const { data, loading, error } = useQuery(GET_JOBS);\n  if (loading) {\n    return <h1>Loading...</h1>;\n  }\n  if (data) {\n    console.log(data);\n    const renderJobs = data.jobs.map(({ id, company, title }) => (\n      <JobContainer>\n        <CompanyName>{company}</CompanyName>\n        <JobTitle to={`/view/${id}`}>{title}</JobTitle>\n      </JobContainer>\n    ));\n    return (\n      <Container>\n        <CreateNewJobContainer>\n          <CreateNewJob to=\"/new\">Post A Job</CreateNewJob>\n        </CreateNewJobContainer>\n        <ul>{renderJobs}</ul>\n      </Container>\n    );\n  }\n}\n\nexport default Jobs;\n","const md = require(\"md-2-json\");\nexport const fromDb = markdownFromDb => md.toMd(JSON.parse(markdownFromDb));\nexport const toDb = stringToBeConverted =>\n  JSON.stringify(md.parse(stringToBeConverted));\n","import React from \"react\";\nimport gql from \"graphql-tag\";\nimport { useQuery, useMutation } from \"react-apollo-hooks\";\nimport ReactMarkdown from \"react-markdown\";\nimport styled from \"styled-components\";\nimport { fromDb } from \"../markdownUtils\";\nimport { Link, navigate } from \"@reach/router\";\n\nconst GET_JOB = gql`\n  query GetJob($jobId: Int!) {\n    jobs_by_pk(id: $jobId) {\n      id\n      company\n      description\n      link_to_apply\n    }\n  }\n`;\n\nconst ApplyLink = styled.a`\n  padding: 10px;\n  background: red;\n  color: white;\n  text-decoration: none;\n`;\nconst ApplyContainer = styled.div`\n  text-align: center;\n  width: 100%;\n  justify-content: space-between;\n  display: flex;\n`;\n\nconst BackButton = styled(Link)`\n  color: gray;\n`;\n\nconst JobContainer = styled.div`\n  margin: 20px;\n`;\n\nconst DeleteJob = styled(ApplyLink)`\n  background: lightgray;\n  cursor: pointer;\n`;\n\nconst DeleteJobFromDb = gql`\n  mutation DeleteJob($jobId: Int!) {\n    delete_jobs(where: { id: { _eq: $jobId } }) {\n      returning {\n        id\n      }\n    }\n  }\n`;\n\nfunction Job(params) {\n  const { data, error, loading } = useQuery(GET_JOB, {\n    variables: { jobId: params.id },\n  });\n  const deleteAJob = useMutation(DeleteJobFromDb);\n  const handleDeleteJob = e => {\n    deleteAJob({ variables: { jobId: parseInt(params.id) } }).then(() =>\n      navigate(\"/\"),\n    );\n  };\n  if (loading) {\n    return <h1>Loading...</h1>;\n  } else if (data) {\n    const { description, id, company, link_to_apply } = data.jobs_by_pk;\n    let convertedDescription = fromDb(description);\n    return (\n      <JobContainer>\n        <BackButton to=\"/\"> Back to search </BackButton>\n        <h1>Work for {company}</h1>\n        <ReactMarkdown source={convertedDescription} />\n        <ApplyContainer>\n          <DeleteJob onClick={handleDeleteJob}>ðŸ’¥</DeleteJob>\n          <ApplyLink href={link_to_apply}>Apply Now</ApplyLink>\n        </ApplyContainer>\n      </JobContainer>\n    );\n  }\n}\n\nexport default Job;\n","import React, { useState } from \"react\";\nimport styled from \"styled-components\";\nimport { Link, navigate } from \"@reach/router\";\nimport { useMutation } from \"react-apollo-hooks\";\nimport gql from \"graphql-tag\";\nimport { toDb } from \"../markdownUtils\";\n\nconst Form = styled.form`\n  display: flex;\n  flex-direction: column;\n  align-items: center;\n`;\n\nconst Input = styled.input`\n  font-size: 24px;\n  margin-top: 10px;\n`;\nconst InputContainer = styled.div`\n  display: flex;\n  flex-direction: column;\n  width: 50%;\n`;\n\nconst Submit = styled.input`\n  font-size: 32px;\n  padding: 5px;\n  margin-top: 15px;\n  width: 50%;\n  align-self: flex-end;\n`;\n\nconst JobDescription = styled.textarea`\n  font-size: 18px;\n`;\n\nconst Cancel = styled(Link)`\n  position: fixed;\n  top: 0;\n  left: 10px;\n  font-size: 18px;\n  margin-top: 15px;\n  color: gray;\n`;\n\nconst INSERT_JOB = gql`\n  mutation InsertJob(\n    $company: String!\n    $linkToApply: String!\n    $title: String!\n    $description: String!\n  ) {\n    insert_jobs(\n      objects: {\n        company: $company\n        link_to_apply: $linkToApply\n        title: $title\n        description: $description\n      }\n    ) {\n      returning {\n        id\n        company\n      }\n    }\n  }\n`;\nfunction JobForm({ id }) {\n  const [formState, setFormState] = useState({\n    company: \"\",\n    title: \"\",\n    description: \"\",\n    linkToApply: \"\",\n  });\n  const handleChange = e =>\n    setFormState({ ...formState, [e.target.name]: e.target.value });\n  const { company, title, description, linkToApply } = formState;\n  const insertJob = useMutation(INSERT_JOB);\n  const handleSubmit = e => {\n    e.preventDefault();\n    const { company, title, description, linkToApply } = formState;\n    const convertedDescription = toDb(description);\n    insertJob({\n        description: convertedDescription,\n    }).then(() => navigate(\"/\"));\n  };\n  return (\n    <Form onSubmit={handleSubmit}>\n      <InputContainer>\n        <Input\n          type=\"text\"\n          placeholder=\"Your Company Name\"\n          onChange={handleChange}\n          value={company}\n          name=\"company\"\n        />\n        <Input\n          type=\"text\"\n          placeholder=\"Job Title\"\n          onChange={handleChange}\n          value={title}\n          name=\"title\"\n        />\n        <Input\n          type=\"text\"\n          placeholder=\"Link to apply\"\n          onChange={handleChange}\n          value={linkToApply}\n          name=\"linkToApply\"\n        />\n        <JobDescription\n          name=\"description\"\n          id=\"description\"\n          placeholder=\"Job Description\"\n          cols=\"30\"\n          rows=\"10\"\n          value={description}\n          onChange={handleChange}\n        />\n        <Submit type=\"submit\" value=\"Post\" />\n      </InputContainer>\n      <Cancel to=\"/\">Cancel</Cancel>\n    </Form>\n  );\n}\nexport default JobForm;\n","import ReactDOM from \"react-dom\";\nimport React from \"react\";\nimport Jobs from \"./components/Jobs\";\nimport Job from \"./components/Job\";\nimport JobForm from \"./components/JobForm\";\nimport { ApolloProvider } from \"react-apollo\";\nimport { ApolloProvider as ApolloHooksProvider } from \"react-apollo-hooks\";\nimport ApolloClient from \"apollo-boost\";\nimport { Router } from \"@reach/router\";\n\nconst client = new ApolloClient({\n  uri:\n    \"https://job-board-application.herokuapp.com/v1alpha1/graphql\" /* Example Static GraphQL Backend */,\n});\n\nconst AppRoot = () => (\n  <Router>\n    <Jobs path=\"/\" />\n    <Job path=\"/view/:id\" />\n    <JobForm path=\"/new\" />\n  </Router>\n);\n\nconst App = () => (\n  <ApolloProvider client={client}>\n    <ApolloHooksProvider client={client}>\n      <AppRoot />\n    </ApolloHooksProvider>\n  </ApolloProvider>\n);\n\nconst rootElement = document.getElementById(\"root\");\nReactDOM.render(<App />, rootElement);"],"sourceRoot":""}